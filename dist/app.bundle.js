!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";n.r(e);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function o(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function i(t){return"function"==typeof t}var u=!1,s={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;u=t},get useDeprecatedSynchronousErrorHandling(){return u}};function c(t){setTimeout(function(){throw t})}var l={closed:!0,next:function(t){},error:function(t){if(s.useDeprecatedSynchronousErrorHandling)throw t;c(t)},complete:function(){}},a=Array.isArray||function(t){return t&&"number"==typeof t.length};function h(t){return null!=t&&"object"==typeof t}var f,p={e:{}};function d(){try{return f.apply(this,arguments)}catch(t){return p.e=t,p}}function b(t){return f=t,d}function v(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map(function(t,e){return e+1+") "+t.toString()}).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}v.prototype=Object.create(Error.prototype);var y=v,m=function(){function t(t){this.closed=!1,this._parent=null,this._parents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var t,e=!1;if(!this.closed){var n=this._parent,r=this._parents,o=this._unsubscribe,u=this._subscriptions;this.closed=!0,this._parent=null,this._parents=null,this._subscriptions=null;for(var s=-1,c=r?r.length:0;n;)n.remove(this),n=++s<c&&r[s]||null;if(i(o))b(o).call(this)===p&&(e=!0,t=t||(p.e instanceof y?w(p.e.errors):[p.e]));if(a(u))for(s=-1,c=u.length;++s<c;){var l=u[s];if(h(l))if(b(l.unsubscribe).call(l)===p){e=!0,t=t||[];var f=p.e;f instanceof y?t=t.concat(w(f.errors)):t.push(f)}}if(e)throw new y(t)}},t.prototype.add=function(e){if(!e||e===t.EMPTY)return t.EMPTY;if(e===this)return this;var n=e;switch(typeof e){case"function":n=new t(e);case"object":if(n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if("function"!=typeof n._addParent){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}return(this._subscriptions||(this._subscriptions=[])).push(n),n._addParent(this),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.prototype._addParent=function(t){var e=this._parent,n=this._parents;e&&e!==t?n?-1===n.indexOf(t)&&n.push(t):this._parents=[t]:this._parent=t},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function w(t){return t.reduce(function(t,e){return t.concat(e instanceof y?e.errors:e)},[])}var _="function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random(),g=function(t){function e(n,r,o){var i=t.call(this)||this;switch(i.syncErrorValue=null,i.syncErrorThrown=!1,i.syncErrorThrowable=!1,i.isStopped=!1,i._parentSubscription=null,arguments.length){case 0:i.destination=l;break;case 1:if(!n){i.destination=l;break}if("object"==typeof n){n instanceof e?(i.syncErrorThrowable=n.syncErrorThrowable,i.destination=n,n.add(i)):(i.syncErrorThrowable=!0,i.destination=new x(i,n));break}default:i.syncErrorThrowable=!0,i.destination=new x(i,n,r,o)}return i}return o(e,t),e.prototype[_]=function(){return this},e.create=function(t,n,r){var o=new e(t,n,r);return o.syncErrorThrowable=!1,o},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parent,e=this._parents;return this._parent=null,this._parents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parent=t,this._parents=e,this._parentSubscription=null,this},e}(m),x=function(t){function e(e,n,r,o){var u,s=t.call(this)||this;s._parentSubscriber=e;var c=s;return i(n)?u=n:n&&(u=n.next,r=n.error,o=n.complete,n!==l&&(i((c=Object.create(n)).unsubscribe)&&s.add(c.unsubscribe.bind(c)),c.unsubscribe=s.unsubscribe.bind(s))),s._context=c,s._next=u,s._error=r,s._complete=o,s}return o(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=s.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):c(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;c(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};s.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),s.useDeprecatedSynchronousErrorHandling)throw t;c(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!s.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return s.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(c(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(g);function E(t){for(;t;){var e=t,n=e.closed,r=e.destination,o=e.isStopped;if(n||o)return!1;t=r&&r instanceof g?r:null}return!0}var S="function"==typeof Symbol&&Symbol.observable||"@@observable";function T(){}function I(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return j(t)}function j(t){return t?1===t.length?t[0]:function(e){return t.reduce(function(t,e){return e(t)},e)}:T}var N=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,o=function(t,e,n){if(t){if(t instanceof g)return t;if(t[_])return t[_]()}return t||e||n?new g(t,e,n):new g(l)}(t,e,n);if(r?r.call(o,this.source):o.add(this.source||s.useDeprecatedSynchronousErrorHandling&&!o.syncErrorThrowable?this._subscribe(o):this._trySubscribe(o)),s.useDeprecatedSynchronousErrorHandling&&o.syncErrorThrowable&&(o.syncErrorThrowable=!1,o.syncErrorThrown))throw o.syncErrorValue;return o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){s.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),E(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=O(e))(function(e,r){var o;o=n.subscribe(function(e){try{t(e)}catch(t){r(t),o&&o.unsubscribe()}},r,e)})},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[S]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:j(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=O(t))(function(t,n){var r;e.subscribe(function(t){return r=t},function(t){return n(t)},function(){return t(r)})})},t.create=function(e){return new t(e)},t}();function O(t){if(t||(t=s.Promise||Promise),!t)throw new Error("no Promise impl found");return t}function C(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}C.prototype=Object.create(Error.prototype);var P=C,k=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return o(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(m),A=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return o(e,t),e}(g),M=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return o(e,t),e.prototype[_]=function(){return new A(this)},e.prototype.lift=function(t){var e=new V(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new P;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].next(t)},e.prototype.error=function(t){if(this.closed)throw new P;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),o=0;o<n;o++)r[o].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new P;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new P;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new P;return this.hasError?(t.error(this.thrownError),m.EMPTY):this.isStopped?(t.complete(),m.EMPTY):(this.observers.push(t),new k(this,t))},e.prototype.asObservable=function(){var t=new N;return t.source=this,t},e.create=function(t,e){return new V(t,e)},e}(N),V=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return o(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):m.EMPTY},e}(M);var H=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new F(t,n),o=e.subscribe(r);return r.closed||(r.connection=n.connect()),o},t}(),F=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return o(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(g),L=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return o(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new m).add(this.source.subscribe(new D(this.getSubject(),this))),t.closed?(this._connection=null,t=m.EMPTY):this._connection=t),t},e.prototype.refCount=function(){return function(t){return t.lift(new H(t))}(this)},e}(N),Y=L.prototype,D=(Y._subscribe,Y._isComplete,Y.getSubject,Y.connect,Y.refCount,function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return o(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(A));var R=function(t){function e(e,n,r){var o=t.call(this)||this;return o.key=e,o.groupSubject=n,o.refCountSubscription=r,o}return o(e,t),e.prototype._subscribe=function(t){var e=new m,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new q(n)),e.add(r.subscribe(t)),e},e}(N),q=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return o(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(m),B=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return o(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new P;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(M),U=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return o(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return o(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(m)),W=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(U),z=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),G=function(t){function e(n,r){void 0===r&&(r=z.now);var o=t.call(this,n,function(){return e.delegate&&e.delegate!==o?e.delegate.now():r()})||this;return o.actions=[],o.active=!1,o.scheduled=void 0,o}return o(e,t),e.prototype.schedule=function(n,r,o){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,o):t.prototype.schedule.call(this,n,r,o)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(z),J=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e}(G))(W),K=new N(function(t){return t.complete()});function Q(t){return t?function(t){return new N(function(e){return t.schedule(function(){return e.complete()})})}(t):K}function X(t){return t&&"function"==typeof t.schedule}var Z=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.closed||e.complete()}};function $(t,e){return new N(e?function(n){var r=new m,o=0;return r.add(e.schedule(function(){o!==t.length?(n.next(t[o++]),n.closed||r.add(this.schedule())):n.complete()})),r}:Z(t))}function tt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];switch(X(n)?t.pop():n=void 0,t.length){case 0:return Q(n);case 1:return n?$(t,n):function(t){var e=new N(function(e){e.next(t),e.complete()});return e._isScalar=!0,e.value=t,e}(t[0]);default:return $(t,n)}}function et(t,e){return new N(e?function(n){return e.schedule(nt,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function nt(t){var e=t.error;t.subscriber.error(e)}var rt=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return tt(this.value);case"E":return et(this.error);case"C":return Q()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var ot=function(t){function e(e,n,r){void 0===r&&(r=0);var o=t.call(this,e)||this;return o.scheduler=n,o.delay=r,o}return o(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new it(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(rt.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(rt.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(rt.createComplete()),this.unsubscribe()},e}(g),it=function(){return function(t,e){this.notification=t,this.destination=e}}(),ut=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var o=t.call(this)||this;return o.scheduler=r,o._events=[],o._infiniteTimeWindow=!1,o._bufferSize=e<1?1:e,o._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(o._infiniteTimeWindow=!0,o.next=o.nextInfiniteTimeWindow):o.next=o.nextTimeWindow,o}return o(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new st(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),o=this.scheduler,i=r.length;if(this.closed)throw new P;if(this.isStopped||this.hasError?e=m.EMPTY:(this.observers.push(t),e=new k(this,t)),o&&t.add(t=new ot(t,o)),n)for(var u=0;u<i&&!t.closed;u++)t.next(r[u]);else for(u=0;u<i&&!t.closed;u++)t.next(r[u].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||J).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,o=r.length,i=0;i<o&&!(t-r[i].time<n);)i++;return o>e&&(i=Math.max(i,o-e)),i>0&&r.splice(0,i),r},e}(M),st=function(){return function(t,e){this.time=t,this.value=e}}(),ct=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return o(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),m.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),m.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(M),lt=1,at={};var ht=function(t){var e=lt++;return at[e]=t,Promise.resolve().then(function(){return function(t){var e=at[t];e&&e()}(e)}),e},ft=function(t){delete at[t]},pt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=ht(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ft(n),e.scheduled=void 0)},e}(U),dt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,o=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this.active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(G))(pt),bt=new G(U),vt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return o(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame(function(){return e.flush(null)})))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(U),yt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,o=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<o&&(t=n.shift()));if(this.active=!1,e){for(;++r<o&&(t=n.shift());)t.unsubscribe();throw e}},e}(G))(vt),mt=function(t){function e(e,n){void 0===e&&(e=wt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,function(){return r.frame})||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return o(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n.shift())&&(this.frame=e.delay)<=r&&!(t=e.execute(e.state,e.delay)););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(G),wt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var o=t.call(this,e,n)||this;return o.scheduler=e,o.work=n,o.index=r,o.active=!0,o.index=e.index=r,o}return o(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var o=new e(this.scheduler,this.work);return this.add(o),o.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var o=t.actions;return o.push(this),o.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(U);function _t(t){return t}function gt(t){return!!t&&(t instanceof N||"function"==typeof t.lift&&"function"==typeof t.subscribe)}function xt(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}xt.prototype=Object.create(Error.prototype);var Et=xt;function St(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}St.prototype=Object.create(Error.prototype);var Tt=St;function It(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}It.prototype=Object.create(Error.prototype);var jt=It;function Nt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new Ot(t,e))}}var Ot=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Ct(t,this.project,this.thisArg))},t}(),Ct=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.project=n,o.count=0,o.thisArg=r||o,o}return o(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(g);function Pt(t,e,n){if(e){if(!X(e))return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return Pt(t,n).apply(void 0,r).pipe(Nt(function(t){return a(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o,i=this,u={context:i,subject:o,callbackFunc:t,scheduler:n};return new N(function(r){if(n){var s={args:e,subscriber:r,params:u};return n.schedule(kt,0,s)}if(!o){o=new ct;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];o.next(t.length<=1?t[0]:t),o.complete()}]))}catch(t){E(o)?o.error(t):console.warn(t)}}return o.subscribe(r)})}}function kt(t){var e=this,n=t.args,r=t.subscriber,o=t.params,i=o.callbackFunc,u=o.context,s=o.scheduler,c=o.subject;if(!c){c=o.subject=new ct;try{i.apply(u,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(s.schedule(At,0,{value:r,subject:c}))}]))}catch(t){c.error(t)}}this.add(c.subscribe(r))}function At(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Mt(t,e,n){if(e){if(!X(e))return function(){for(var r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return Mt(t,n).apply(void 0,r).pipe(Nt(function(t){return a(t)?e.apply(void 0,t):e(t)}))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var o={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new N(function(r){var i=o.context,u=o.subject;if(n)return n.schedule(Vt,0,{params:o,subscriber:r,context:i});if(!u){u=o.subject=new ct;try{t.apply(i,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?u.error(n):(u.next(t.length<=1?t[0]:t),u.complete())}]))}catch(t){E(u)?u.error(t):console.warn(t)}}return u.subscribe(r)})}}function Vt(t){var e=this,n=t.params,r=t.subscriber,o=t.context,i=n.callbackFunc,u=n.args,s=n.scheduler,c=n.subject;if(!c){c=n.subject=new ct;try{i.apply(o,u.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(s.schedule(Ft,0,{err:r,subject:c}));else{var o=t.length<=1?t[0]:t;e.add(s.schedule(Ht,0,{value:o,subject:c}))}}]))}catch(t){this.add(s.schedule(Ft,0,{err:t,subject:c}))}}this.add(c.subscribe(r))}function Ht(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Ft(t){var e=t.err;t.subject.error(e)}var Lt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return o(e,t),e.prototype.notifyNext=function(t,e,n,r,o){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(g),Yt=function(t){function e(e,n,r){var o=t.call(this)||this;return o.parent=e,o.outerValue=n,o.outerIndex=r,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(g),Dt=function(t){return function(e){return t.then(function(t){e.closed||(e.next(t),e.complete())},function(t){return e.error(t)}).then(null,c),e}};var Rt=function(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}(),qt=function(t){return function(e){for(var n=t[Rt]();;){var r=n.next();if(r.done){e.complete();break}if(e.next(r.value),e.closed)break}return"function"==typeof n.return&&e.add(function(){n.return&&n.return()}),e}},Bt=function(t){return function(e){var n=t[S]();if("function"!=typeof n.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return n.subscribe(e)}},Ut=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function Wt(t){return t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var zt=function(t){if(t instanceof N)return function(e){return t._isScalar?(e.next(t.value),void e.complete()):t.subscribe(e)};if(t&&"function"==typeof t[S])return Bt(t);if(Ut(t))return Z(t);if(Wt(t))return Dt(t);if(t&&"function"==typeof t[Rt])return qt(t);var e=h(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+e+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Gt(t,e,n,r,o){if(void 0===o&&(o=new Yt(t,n,r)),!o.closed)return zt(e)(o)}var Jt={};function Kt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return X(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&a(t[0])&&(t=t[0]),$(t,r).lift(new Qt(n))}var Qt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Xt(t,this.resultSelector))},t}(),Xt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return o(e,t),e.prototype._next=function(t){this.values.push(Jt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Gt(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,o){var i=this.values,u=i[n],s=this.toRespond?u===Jt?--this.toRespond:this.toRespond:0;i[n]=e,0===s&&(this.resultSelector?this._tryResultSelector(i):this.destination.next(i.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Lt);function Zt(t,e){if(!e)return t instanceof N?t:new N(zt(t));if(null!=t){if(function(t){return t&&"function"==typeof t[S]}(t))return function(t,e){return new N(e?function(n){var r=new m;return r.add(e.schedule(function(){var o=t[S]();r.add(o.subscribe({next:function(t){r.add(e.schedule(function(){return n.next(t)}))},error:function(t){r.add(e.schedule(function(){return n.error(t)}))},complete:function(){r.add(e.schedule(function(){return n.complete()}))}}))})),r}:Bt(t))}(t,e);if(Wt(t))return function(t,e){return new N(e?function(n){var r=new m;return r.add(e.schedule(function(){return t.then(function(t){r.add(e.schedule(function(){n.next(t),r.add(e.schedule(function(){return n.complete()}))}))},function(t){r.add(e.schedule(function(){return n.error(t)}))})})),r}:Dt(t))}(t,e);if(Ut(t))return $(t,e);if(function(t){return t&&"function"==typeof t[Rt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new N(e?function(n){var r,o=new m;return o.add(function(){r&&"function"==typeof r.return&&r.return()}),o.add(e.schedule(function(){r=t[Rt](),o.add(e.schedule(function(){if(!n.closed){var t,e;try{var o=r.next();t=o.value,e=o.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}}))})),o}:qt(t))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}var $t=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new te(t,this.project,this.concurrent))},t}(),te=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var o=t.call(this,e)||this;return o.project=n,o.concurrent=r,o.hasCompleted=!1,o.buffer=[],o.active=0,o.index=0,o}return o(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new Yt(this,void 0,void 0);this.destination.add(r),Gt(this,t,e,n,r)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,o){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Lt);function ee(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),function t(e,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(o){return o.pipe(t(function(t,r){return Zt(e(t,r)).pipe(Nt(function(e,o){return n(t,e,r,o)}))},r))}:("number"==typeof n&&(r=n),function(t){return t.lift(new $t(e,r))})}(_t,t)}function ne(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===t.length||2===t.length&&X(t[1])?Zt(t[0]):ee(1)(tt.apply(void 0,t))}function re(t){return new N(function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Zt(n):Q()).subscribe(e)})}function oe(){for(var t,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return"function"==typeof e[e.length-1]&&(t=e.pop()),1===e.length&&a(e[0])&&(e=e[0]),0===e.length?K:t?oe(e).pipe(Nt(function(e){return t.apply(void 0,e)})):new N(function(t){return new ie(t,e)})}var ie=function(t){function e(e,n){var r=t.call(this,e)||this;r.sources=n,r.completed=0,r.haveValues=0;var o=n.length;r.values=new Array(o);for(var i=0;i<o;i++){var u=Gt(r,n[i],null,i);u&&r.add(u)}return r}return o(e,t),e.prototype.notifyNext=function(t,e,n,r,o){this.values[n]=e,o._hasValue||(o._hasValue=!0,this.haveValues++)},e.prototype.notifyComplete=function(t){var e=this.destination,n=this.haveValues,r=this.values,o=r.length;t._hasValue?(this.completed++,this.completed===o&&(n===o&&e.next(r),e.complete())):e.complete()},e}(Lt);Object.prototype.toString;function ue(t,e,n,r){return i(n)&&(r=n,n=void 0),r?ue(t,e,n).pipe(Nt(function(t){return a(t)?r.apply(void 0,t):r(t)})):new N(function(r){!function t(e,n,r,o,i){var u;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var s=e;e.addEventListener(n,r,i),u=function(){return s.removeEventListener(n,r,i)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var c=e;e.on(n,r),u=function(){return c.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var l=e;e.addListener(n,r),u=function(){return l.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var a=0,h=e.length;a<h;a++)t(e[a],n,r,o,i)}o.add(u)}(t,e,function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)},r,n)})}function se(t,e,n){return n?se(t,e).pipe(Nt(function(t){return a(t)?n.apply(void 0,t):n(t)})):new N(function(n){var r,o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(o)}catch(t){return void n.error(t)}if(i(e))return function(){return e(o,r)}})}function ce(t,e,n,r,o){var i,u;if(1==arguments.length){var s=t;u=s.initialState,e=s.condition,n=s.iterate,i=s.resultSelector||_t,o=s.scheduler}else void 0===r||X(r)?(u=t,i=_t,o=r):(u=t,i=r);return new N(function(t){var r=u;if(o)return o.schedule(le,0,{subscriber:t,iterate:n,condition:e,resultSelector:i,state:r});for(;;){if(e){var s=void 0;try{s=e(r)}catch(e){return void t.error(e)}if(!s){t.complete();break}}var c=void 0;try{c=i(r)}catch(e){return void t.error(e)}if(t.next(c),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}})}function le(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var o;try{o=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(o),!e.closed))return this.schedule(t)}}function ae(t,e,n){return void 0===e&&(e=K),void 0===n&&(n=K),re(function(){return t()?e:n})}function he(t){return!a(t)&&t-parseFloat(t)+1>=0}function fe(t,e){return void 0===t&&(t=0),void 0===e&&(e=bt),(!he(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=bt),new N(function(n){return n.add(e.schedule(pe,t,{subscriber:n,counter:0,period:t})),n})}function pe(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function de(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,o=t[t.length-1];return X(o)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof o&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof N?t[0]:ee(n)($(t,r))}var be=new N(T);function ve(){return be}function ye(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return K;var n=t[0],r=t.slice(1);return 1===t.length&&a(n)?ye.apply(void 0,n):new N(function(t){var e=function(){return t.add(ye.apply(void 0,r).subscribe(t))};return Zt(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})})}function me(t,e){return new N(e?function(n){var r=Object.keys(t),o=new m;return o.add(e.schedule(we,0,{keys:r,index:0,subscriber:n,subscription:o,obj:t})),o}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var o=n[r];t.hasOwnProperty(o)&&e.next([o,t[o]])}e.complete()})}function we(t){var e=t.keys,n=t.index,r=t.subscriber,o=t.subscription,i=t.obj;if(!r.closed)if(n<e.length){var u=e[n];r.next([u,i[u]]),o.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:o,obj:i}))}else r.complete()}function _e(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!a(t[0]))return t[0];t=t[0]}return $(t,void 0).lift(new ge)}var ge=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new xe(t))},t}(),xe=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return o(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],o=Gt(this,r,r,n);this.subscriptions&&this.subscriptions.push(o),this.add(o)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,o){if(!this.hasFirst){this.hasFirst=!0;for(var i=0;i<this.subscriptions.length;i++)if(i!==n){var u=this.subscriptions[i];u.unsubscribe(),this.remove(u)}this.subscriptions=null}this.destination.next(e)},e}(Lt);function Ee(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=0),new N(function(r){var o=0,i=t;if(n)return n.schedule(Se,0,{index:o,count:e,start:t,subscriber:r});for(;;){if(o++>=e){r.complete();break}if(r.next(i++),r.closed)break}})}function Se(t){var e=t.start,n=t.index,r=t.count,o=t.subscriber;n>=r?o.complete():(o.next(e),o.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Te(t,e,n){void 0===t&&(t=0);var r=-1;return he(e)?r=Number(e)<1?1:Number(e):X(e)&&(n=e),X(n)||(n=bt),new N(function(e){var o=he(t)?t:+t-n.now();return n.schedule(Ie,o,{index:0,period:r,subscriber:e})})}function Ie(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function je(t,e){return new N(function(n){var r,o;try{r=t()}catch(t){return void n.error(t)}try{o=e(r)}catch(t){return void n.error(t)}var i=(o?Zt(o):K).subscribe(n);return function(){i.unsubscribe(),r&&r.unsubscribe()}})}function Ne(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),$(t,void 0).lift(new Oe(n))}var Oe=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Ce(t,this.resultSelector))},t}(),Ce=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var o=t.call(this,e)||this;return o.iterators=[],o.active=0,o.resultSelector="function"==typeof n?n:null,o.values=r,o}return o(e,t),e.prototype._next=function(t){var e=this.iterators;a(t)?e.push(new ke(t)):"function"==typeof t[Rt]?e.push(new Pe(t[Rt]())):e.push(new Ae(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(u=t[r]).hasValue&&!u.hasValue())return}var o=!1,i=[];for(r=0;r<e;r++){var u,s=(u=t[r]).next();if(u.hasCompleted()&&(o=!0),s.done)return void n.complete();i.push(s.value)}this.resultSelector?this._tryresultSelector(i):n.next(i),o&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(g),Pe=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),ke=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[Rt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Ae=function(t){function e(e,n,r){var o=t.call(this,e)||this;return o.parent=n,o.observable=r,o.stillUnsubscribed=!0,o.buffer=[],o.isComplete=!1,o}return o(e,t),e.prototype[Rt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,o){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Gt(this,this.observable,this,e)},e}(Lt);n.d(e,"Observable",function(){return N}),n.d(e,"ConnectableObservable",function(){return L}),n.d(e,"GroupedObservable",function(){return R}),n.d(e,"observable",function(){return S}),n.d(e,"Subject",function(){return M}),n.d(e,"BehaviorSubject",function(){return B}),n.d(e,"ReplaySubject",function(){return ut}),n.d(e,"AsyncSubject",function(){return ct}),n.d(e,"asapScheduler",function(){return dt}),n.d(e,"asyncScheduler",function(){return bt}),n.d(e,"queueScheduler",function(){return J}),n.d(e,"animationFrameScheduler",function(){return yt}),n.d(e,"VirtualTimeScheduler",function(){return mt}),n.d(e,"VirtualAction",function(){return wt}),n.d(e,"Scheduler",function(){return z}),n.d(e,"Subscription",function(){return m}),n.d(e,"Subscriber",function(){return g}),n.d(e,"Notification",function(){return rt}),n.d(e,"pipe",function(){return I}),n.d(e,"noop",function(){return T}),n.d(e,"identity",function(){return _t}),n.d(e,"isObservable",function(){return gt}),n.d(e,"ArgumentOutOfRangeError",function(){return Et}),n.d(e,"EmptyError",function(){return Tt}),n.d(e,"ObjectUnsubscribedError",function(){return P}),n.d(e,"UnsubscriptionError",function(){return y}),n.d(e,"TimeoutError",function(){return jt}),n.d(e,"bindCallback",function(){return Pt}),n.d(e,"bindNodeCallback",function(){return Mt}),n.d(e,"combineLatest",function(){return Kt}),n.d(e,"concat",function(){return ne}),n.d(e,"defer",function(){return re}),n.d(e,"empty",function(){return Q}),n.d(e,"forkJoin",function(){return oe}),n.d(e,"from",function(){return Zt}),n.d(e,"fromEvent",function(){return ue}),n.d(e,"fromEventPattern",function(){return se}),n.d(e,"generate",function(){return ce}),n.d(e,"iif",function(){return ae}),n.d(e,"interval",function(){return fe}),n.d(e,"merge",function(){return de}),n.d(e,"never",function(){return ve}),n.d(e,"of",function(){return tt}),n.d(e,"onErrorResumeNext",function(){return ye}),n.d(e,"pairs",function(){return me}),n.d(e,"race",function(){return _e}),n.d(e,"range",function(){return Ee}),n.d(e,"throwError",function(){return et}),n.d(e,"timer",function(){return Te}),n.d(e,"using",function(){return je}),n.d(e,"zip",function(){return Ne}),n.d(e,"EMPTY",function(){return K}),n.d(e,"NEVER",function(){return be}),n.d(e,"config",function(){return s})},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0),o=n(0),i=n(2),u=n(3),s=n(4);var c=document.getElementById("message"),l=document.getElementById("outputNumbers"),a=document.getElementById("outputTodos"),h=document.getElementById("promiseOutput"),f=document.getElementById("freshObsOutput"),p=document.getElementById("theBtn");r.fromEvent(p,"click").subscribe(t=>{c.innerHTML="Clicked"},t=>{c.innerHTML=t,console.log("Error")},()=>{c.innerHTML="Completed",console.log("Completed")});var d=document.getElementById("theInput");r.fromEvent(d,"keyup").subscribe(t=>{c.innerHTML=t.target.value},t=>{c.innerHTML=t,console.log("Error")},()=>{c.innerHTML="Completed",console.log("Completed")});o.from([35,24,36,47,15,75,63,52,84]).subscribe(t=>{var e=document.createElement("li"),n=document.createTextNode(t);e.appendChild(n),l.appendChild(e)},t=>{console.log(t),c.innerHTML=t},()=>{console.log("number stream completed"),c.innerHTML="Number Stream Completed"});let b=i.default.todosFromApi();o.from(b).subscribe(t=>{t.forEach(t=>{var e=document.createElement("li"),n=document.createTextNode(t.title);e.appendChild(n),a.appendChild(e)})},t=>{console.log(t),c.innerHTML=t},()=>{console.log("Todo stream completed"),c.innerHTML="Todo Stream Completed"});var v=new Set(["Hey",45,{title:"interesting"}]);o.from(v).subscribe(t=>{},t=>{console.error(t),c.innerHTML=t},()=>{console.log("Set stream completed"),c.innerHTML="Set Stream Completed"}),u.default.dummySource.subscribe(t=>{let e=[];e.push(t),e.forEach(t=>{var e=document.createElement("li"),n=document.createTextNode(t);e.appendChild(n),f.appendChild(e)})},t=>{console.error(t),c.innerHTML=t},()=>{console.log("Set stream completed"),c.innerHTML="Set Stream Completed"});let y=s.default.dummyPromise;o.from(y).subscribe(t=>{console.log("Dummy Promise Observable using fromPromise ",t)},t=>{console.error(t),c.innerHTML=t},()=>{console.log("Dummy Promise completed"),c.innerHTML="Dummy Promise Completed"});let m=s.default.serverPromise;o.from(m).subscribe(t=>{t.forEach(t=>{var e=document.createElement("li"),n=document.createTextNode(t.username);e.appendChild(n),h.appendChild(e)})},t=>{console.error(t),c.innerHTML=t},()=>{console.log("Server Promise completed"),c.innerHTML="Server Promise Completed"})},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function u(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(u,s)}c((r=r.apply(t,e||[])).next())})};Object.defineProperty(e,"__esModule",{value:!0});var o="https://jsonplaceholder.typicode.com/todos";let i={todosFromApi:function(){return r(this,void 0,void 0,function*(){return(yield(yield fetch(o)).json()).splice(0,10)})}};e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});let r={dummySource:new(n(0).Observable)(t=>{t.next("Soemthing weird"),t.next("Another thing, I kind of get it now"),t.complete()})};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});let r={dummyPromise:new Promise(function(t,e){console.log("Creating Promise"),setTimeout(()=>{t("Dummy Data ")},2500)}),serverPromise:new Promise(function(t,e){fetch("https://jsonplaceholder.typicode.com/users").then(e=>t(e.json()))})};e.default=r}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,